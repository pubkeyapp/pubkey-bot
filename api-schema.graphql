# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

input AddBotRoleConnectionInput {
  description: String!
  key: String!
  name: String!
  type: DiscordRoleConnectionType!
}

input AdminCreateBotInput {
  clientId: String!
  clientSecret: String!
  token: String!
}

input AdminCreateCollectionInput {
  account: String!
  network: NetworkType!
}

input AdminCreateConnectionInput {
  botId: String!
  collectionId: String!
  key: String!
}

input AdminCreateEmailInput {
  email: String!
  ownerId: String!
}

input AdminCreateIdentityInput {
  ownerId: String!
  provider: IdentityProvider!
  providerId: String!
}

input AdminCreateNetworkInput {
  endpoint: String!
  name: String!
  type: NetworkType!
}

input AdminCreateUserInput {
  password: String
  username: String!
}

input AdminFindManyBotInput {
  limit: Int = 10
  page: Int = 1
  search: String
}

input AdminFindManyCollectionInput {
  limit: Int = 10
  page: Int = 1
  search: String
}

input AdminFindManyConnectionInput {
  botId: String!
  limit: Int = 10
  page: Int = 1
}

input AdminFindManyEmailInput {
  ownerId: String!
}

input AdminFindManyIdentityInput {
  ownerId: String
  provider: IdentityProvider
}

input AdminFindManyNetworkInput {
  limit: Int = 10
  page: Int = 1
  search: String
}

input AdminFindManyUserInput {
  limit: Int = 10
  page: Int = 1
  role: UserRole
  search: String
  status: UserStatus
}

input AdminUpdateBotInput {
  name: String
}

input AdminUpdateCollectionInput {
  description: String
  imageUrl: String
  metadataUrl: String
  name: String
  symbol: String
  vaultId: String
}

input AdminUpdateConnectionInput {
  key: String
}

input AdminUpdateEmailInput {
  default: Boolean
  email: String
  private: Boolean
  verified: Boolean
}

input AdminUpdateNetworkInput {
  name: String
}

input AdminUpdateUserInput {
  avatarUrl: String
  developer: Boolean
  name: String
  role: UserRole
  status: UserStatus
  username: String
}

type AppConfig {
  authDiscordEnabled: Boolean!
  authPasswordEnabled: Boolean!
  authRegisterEnabled: Boolean!
}

type Bot {
  application: JSON
  avatarUrl: String
  createdAt: DateTime
  developersUrl: String!
  id: String!
  inviteUrl: String!
  name: String!
  redirectUrl: String!
  redirectUrlSet: Boolean
  started: Boolean!
  status: BotStatus
  updatedAt: DateTime
  verificationUrl: String!
  verificationUrlSet: Boolean
}

type BotPaging {
  data: [Bot!]!
  meta: PagingMeta!
}

enum BotStatus {
  Active
  Inactive
}

type Collection {
  account: String!
  assets: [CollectionAsset!]
  createdAt: DateTime
  description: String
  id: String!
  imageUrl: String
  metadataUrl: String
  name: String
  network: NetworkType!
  symbol: String
  updatedAt: DateTime
  vaultId: String
}

type CollectionAsset {
  account: String
  attributeMap: JSON
  attributes: [CollectionAssetAttribute!]
  createdAt: DateTime
  id: String
  image: String
  metadata: JSON
  name: String!
  network: NetworkType
  owner: String
  raw: JSON
  symbol: String
  updatedAt: DateTime
}

type CollectionAssetAttribute {
  count: Int
  createdAt: DateTime
  id: String
  key: String!
  updatedAt: DateTime
  value: String!
}

type CollectionPaging {
  data: [Collection!]!
  meta: PagingMeta!
}

type Connection {
  botId: String!
  collection: Collection
  collectionId: String!
  createdAt: DateTime
  id: String!
  key: String!
  updatedAt: DateTime
}

type ConnectionPaging {
  data: [Connection!]!
  meta: PagingMeta!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type DiscordRoleConnection {
  collection: Collection
  description: String!
  key: String!
  metadata: String
  name: String!
  type: DiscordRoleConnectionType!
}

enum DiscordRoleConnectionType {
  booleanEqual
  booleanNotEqual
  dateTimeGreaterThanOrEqual
  dateTimeLessThanOrEqual
  integerEqual
  integerGreaterThanOrEqual
  integerLessThanOrEqual
  integerNotEqual
}

type DiscordServer {
  icon: String
  id: String!
  name: String!
  permissions: [String!]
}

type DiscordServerRole {
  color: Int!
  id: String!
  managed: Boolean!
  name: String!
  position: Int!
}

type Email {
  createdAt: DateTime!
  default: Boolean
  email: String!
  id: String!
  private: Boolean
  updatedAt: DateTime!
  verified: Boolean
}

type Identity {
  challenges: [IdentityChallenge!]
  createdAt: DateTime!
  expired: Boolean
  id: String!
  name: String
  owner: User
  profile: JSON
  provider: IdentityProvider!
  providerId: String!
  updatedAt: DateTime!
  verified: Boolean
}

type IdentityChallenge {
  challenge: String!
  createdAt: DateTime!
  id: String!
  ip: String!
  provider: IdentityProvider!
  providerId: String!
  signature: String
  updatedAt: DateTime!
  userAgent: String!
  verified: Boolean!
}

enum IdentityProvider {
  Discord
  Solana
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

input LinkIdentityInput {
  provider: IdentityProvider!
  providerId: String!
}

input LoginInput {
  password: String!
  username: String!
}

type Mutation {
  adminCreateBot(input: AdminCreateBotInput!): Bot
  adminCreateCollection(input: AdminCreateCollectionInput!): Collection
  adminCreateConnection(input: AdminCreateConnectionInput!): Connection
  adminCreateEmail(input: AdminCreateEmailInput!): Email
  adminCreateIdentity(input: AdminCreateIdentityInput!): Identity
  adminCreateNetwork(input: AdminCreateNetworkInput!): Network
  adminCreateUser(input: AdminCreateUserInput!): User
  adminDeleteBot(botId: String!): Boolean
  adminDeleteCollection(collectionId: String!): Boolean
  adminDeleteConnection(connectionId: String!): Boolean
  adminDeleteEmail(emailId: String!): Boolean
  adminDeleteIdentity(identityId: String!): Boolean
  adminDeleteNetwork(networkId: String!): Boolean
  adminDeleteUser(userId: String!): Boolean
  adminUpdateBot(botId: String!, input: AdminUpdateBotInput!): Bot
  adminUpdateCollection(collectionId: String!, input: AdminUpdateCollectionInput!): Collection
  adminUpdateConnection(connectionId: String!, input: AdminUpdateConnectionInput!): Connection
  adminUpdateEmail(emailId: String!, input: AdminUpdateEmailInput!): Email
  adminUpdateNetwork(input: AdminUpdateNetworkInput!, networkId: String!): Network
  adminUpdateUser(input: AdminUpdateUserInput!, userId: String!): User
  login(input: LoginInput!): User
  logout: Boolean
  managerAddBotRoleConnection(botId: String!, input: AddBotRoleConnectionInput!): [DiscordRoleConnection!]
  managerLeaveBotServer(botId: String!, serverId: String!): Boolean
  managerRemoveBotRoleConnection(botId: String!, key: String!): [DiscordRoleConnection!]
  managerStartBot(botId: String!): Boolean
  managerStopBot(botId: String!): Boolean
  register(input: RegisterInput!): User
  userDeleteIdentity(identityId: String!): Boolean
  userLinkIdentity(input: LinkIdentityInput!): Identity
  userUpdateUser(input: UserUpdateUserInput!): User
  userVerifyIdentityChallenge(input: VerifyIdentityChallengeInput!): IdentityChallenge
}

type Network {
  createdAt: DateTime
  endpoint: String!
  id: String!
  name: String!
  type: NetworkType!
  updatedAt: DateTime
}

type NetworkPaging {
  data: [Network!]!
  meta: PagingMeta!
}

enum NetworkType {
  SolanaDevnet
  SolanaMainnet
}

type PagingMeta {
  currentPage: Int!
  isFirstPage: Boolean!
  isLastPage: Boolean!
  nextPage: Int
  pageCount: Int
  previousPage: Int
  totalCount: Int
}

type Query {
  adminFindManyBot(input: AdminFindManyBotInput!): BotPaging
  adminFindManyCollection(input: AdminFindManyCollectionInput!): CollectionPaging
  adminFindManyConnection(input: AdminFindManyConnectionInput!): ConnectionPaging
  adminFindManyEmail(input: AdminFindManyEmailInput!): [Email!]
  adminFindManyIdentity(input: AdminFindManyIdentityInput!): [Identity!]
  adminFindManyNetwork(input: AdminFindManyNetworkInput!): NetworkPaging
  adminFindManyUser(input: AdminFindManyUserInput!): UserPaging
  adminFindOneBot(botId: String!): Bot
  adminFindOneCollection(collectionId: String!): Collection
  adminFindOneConnection(connectionId: String!): Connection
  adminFindOneNetwork(networkId: String!): Network
  adminFindOneUser(userId: String!): User
  appConfig: AppConfig!
  managerGetBotRoleConnections(botId: String!): [DiscordRoleConnection!]
  managerGetBotRoles(botId: String!, serverId: String!): [DiscordServerRole!]
  managerGetBotServer(botId: String!, serverId: String!): DiscordServer
  managerGetBotServers(botId: String!): [DiscordServer!]
  me: User
  uptime: Float!
  userFindManyIdentity: [Identity!]
  userFindManyUser(input: UserFindManyUserInput!): UserPaging
  userFindOneBot(botId: String!): Bot
  userFindOneUser(username: String!): User
  userGetBotCollectionAssets(botId: String!): [Collection!]
  userGetBotRoleConnections(botId: String!): [DiscordRoleConnection!]
  userGetBotRoles(botId: String!, serverId: String!): [DiscordServerRole!]
  userRequestIdentityChallenge(input: RequestIdentityChallengeInput!): IdentityChallenge
}

input RegisterInput {
  password: String!
  username: String!
}

input RequestIdentityChallengeInput {
  provider: IdentityProvider!
  providerId: String!
}

type User {
  avatarUrl: String
  createdAt: DateTime
  developer: Boolean
  id: String!
  name: String
  profileUrl: String
  role: UserRole
  status: UserStatus
  updatedAt: DateTime
  username: String
}

input UserFindManyUserInput {
  limit: Int = 10
  page: Int = 1
  search: String
}

type UserPaging {
  data: [User!]!
  meta: PagingMeta!
}

enum UserRole {
  Admin
  User
}

enum UserStatus {
  Active
  Created
  Inactive
}

input UserUpdateUserInput {
  avatarUrl: String
  developer: Boolean
  name: String
}

input VerifyIdentityChallengeInput {
  challenge: String!
  provider: IdentityProvider!
  providerId: String!
  signature: String!
  useLedger: Boolean = false
}