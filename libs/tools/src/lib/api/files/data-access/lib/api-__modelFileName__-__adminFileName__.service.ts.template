import { Injectable } from '@nestjs/common'
import { ApiCoreService } from '@<%= npmScope %>/api/core/data-access'
import { <%= admin.className %>Create<%= model.className %>Input } from './dto/<%= admin.fileName %>-create-<%= model.fileName %>.input'
import { <%= admin.className %>FindMany<%= model.className %>Input } from './dto/<%= admin.fileName %>-find-many-<%= model.fileName %>.input'
import { <%= admin.className %>Update<%= model.className %>Input } from './dto/<%= admin.fileName %>-update-<%= model.fileName %>.input'
import { <%= model.className %>Paging } from './entity/<%= model.fileName %>-paging.entity'
import { get<%= admin.className %><%= model.className %>WhereInput } from './helpers/get-<%= admin.fileName %>-<%= model.fileName %>-where.input'

@Injectable()
export class Api<%= model.className %><%= admin.className %>Service {
  constructor(private readonly core: ApiCoreService) {}

  async create<%= model.className %>(input: <%= admin.className %>Create<%= model.className %>Input) {
    return this.core.data.<%= model.propertyName %>.create({ data: input })
  }

  async delete<%= model.className %>(<%= model.propertyName %>Id: string) {
    const deleted = await this.core.data.<%= model.propertyName %>.delete({ where: { id: <%= model.propertyName %>Id } })
    return !!deleted
  }

  async findMany<%= model.className %>(input: <%= admin.className %>FindMany<%= model.className %>Input): Promise<<%= model.className %>Paging> {
    return this.core.data.<%= model.propertyName %>
      .paginate({
        orderBy: { <%= label.propertyName %>: 'asc' },
        where: get<%= admin.className %><%= model.className %>WhereInput(input),
      })
      .withPages({ limit: input.limit, page: input.page })
      .then(([data, meta]) => ({ data, meta }))
  }

  async findOne<%= model.className %>(<%= model.propertyName %>Id: string) {
    return this.core.data.<%= model.propertyName %>.findUnique({ where: { id: <%= model.propertyName %>Id } })
  }

  async update<%= model.className %>(<%= model.propertyName %>Id: string, input: <%= admin.className %>Update<%= model.className %>Input) {
    return this.core.data.<%= model.propertyName %>.update({ where: { id: <%= model.propertyName %>Id }, data: input })
  }
}
