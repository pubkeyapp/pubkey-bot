import { Resolver } from '@nestjs/graphql'
import { <%= app.className %><%= model.className %>Service } from '@<%= npmScope %>/<%= app.fileName %>/<%= model.fileName %>/data-access'
import { <%= app.className %>AuthGraphQLAdminGuard } from '@<%= npmScope %>/<%= app.fileName %>/auth/data-access'
import { Mutation, Query, Args } from '@nestjs/graphql'
import { UseGuards } from '@nestjs/common'
import {
  <%= admin.className %>Create<%= model.className %>Input,
  <%= admin.className %>FindMany<%= model.className %>Input,
  <%= model.className %>,
  <%= model.className %>Paging,
  <%= admin.className %>Update<%= model.className %>Input,
} from '@<%= npmScope %>/<%= app.fileName %>/<%= model.fileName %>/data-access'

@Resolver()
@UseGuards(<%= app.className %>AuthGraphQLAdminGuard)
export class <%= app.className %><%= model.className %><%= admin.className %>Resolver {
  constructor(private readonly service: <%= app.className %><%= model.className %>Service) {}

  @Mutation(() => <%= model.className %>, { nullable: true })
  <%= admin.propertyName %>Create<%= model.className %>(@Args('input') input: <%= admin.className %>Create<%= model.className %>Input) {
    return this.service.<%= admin.propertyName %>.create<%= model.className %>(input)
  }

  @Mutation(() => Boolean, { nullable: true })
  <%= admin.propertyName %>Delete<%= model.className %>(@Args('<%= model.propertyName %>Id') <%= model.propertyName %>Id: string) {
    return this.service.<%= admin.propertyName %>.delete<%= model.className %>(<%= model.propertyName %>Id)
  }

  @Query(() => <%= model.className %>Paging, { nullable: true })
  <%= admin.propertyName %>FindMany<%= model.className %>(@Args('input') input: <%= admin.className %>FindMany<%= model.className %>Input) {
    return this.service.<%= admin.propertyName %>.findMany<%= model.className %>(input)
  }

  @Query(() => <%= model.className %>, { nullable: true })
  <%= admin.propertyName %>FindOne<%= model.className %>(@Args('<%= model.propertyName %>Id') <%= model.propertyName %>Id: string) {
    return this.service.<%= admin.propertyName %>.findOne<%= model.className %>(<%= model.propertyName %>Id)
  }

  @Mutation(() => <%= model.className %>, { nullable: true })
  <%= admin.propertyName %>Update<%= model.className %>(@Args('<%= model.propertyName %>Id') <%= model.propertyName %>Id: string, @Args('input') input: <%= admin.className %>Update<%= model.className %>Input) {
    return this.service.<%= admin.propertyName %>.update<%= model.className %>(<%= model.propertyName %>Id, input)
  }
}
